---
export interface Props {
    videoId: string;
    width: number;
    height: number;
}

const { videoId, width, height } = Astro.props;

const url = `https://www.youtube-nocookie.com/embed/${videoId}?autoplay=1&mute=1`;
---

<div class="video-container">
    <!-- The iframe isn't actually loaded into the document by default because of the <template> -->
    <template>
        <!--
            This iframe is set to be however big its containing div is.
            That means we can remove it and it won't change the layout which - this is
            useful for lazy loading the video (since theres no reason to start playing until the user scrolls down).

            We use an IntersectionObserver to detect when the video is in view and then add the iframe back in.
            -->
        <iframe
            class="video-player"
            width={width}
            height={height}
            src={url}
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            referrerpolicy="strict-origin-when-cross-origin"
            loading="lazy"
            allowfullscreen></iframe>
    </template>
</div>

<script>
    // Lazy load the video by adding the iframe when it's in view.
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const template =
                        entry.target.querySelector<HTMLTemplateElement>(
                            "template",
                        );
                    if (template) {
                        const iframe = template.content.firstElementChild!;
                        entry.target.appendChild(iframe);
                        template.remove();
                        observer.unobserve(entry.target);
                    }
                }
            });
        },
        // just try to load the video a little early
        { rootMargin: "30px" },
    );

    const videoContainer = document.querySelectorAll(".video-container");
    for (const container of videoContainer) {
        observer.observe(container);
    }
</script>

<style lang="scss">
    .video-container {
        position: relative;
        overflow: hidden;
        width: 100%;
        padding-top: 46.45833333%; // Aspect ratio: 892 (width) / 1920 (height)
        background-color: black;
    }

    .video-player {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
    }
</style>
